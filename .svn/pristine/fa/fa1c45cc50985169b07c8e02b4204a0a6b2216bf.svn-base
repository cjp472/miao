package com.liuzhuni.lzn.core.personInfo;

import android.os.Bundle;
import android.view.View;
import android.widget.TextView;

import com.lidroid.xutils.ViewUtils;
import com.lidroid.xutils.view.annotation.ViewInject;
import com.lidroid.xutils.view.annotation.event.OnClick;
import com.liuzhuni.lzn.R;
import com.liuzhuni.lzn.base.Base2Activity;
import com.liuzhuni.lzn.core.login.ButtonThread;
import com.liuzhuni.lzn.core.login.Threadable;
import com.liuzhuni.lzn.core.login.ui.CleanNoEditText;
import com.liuzhuni.lzn.core.regist.SendCodeThread;
import com.liuzhuni.lzn.core.select.ui.CleanableEditText;
import com.liuzhuni.lzn.utils.TextModify;

public class BindTelActivity extends Base2Activity {


    @ViewInject(R.id.title_left)
    private TextView mBackTv;
    @ViewInject(R.id.title_right)
    private TextView mRightTv;
    @ViewInject(R.id.title_middle)
    private TextView mMiddleTv;
    @ViewInject(R.id.bind_tel_et)
    private CleanNoEditText mTelEt;
    @ViewInject(R.id.bind_tel_code_et)
    private CleanableEditText mCodeEt;
    @ViewInject(R.id.bind_tel_send_again)
    private TextView mSendCodeTv;
    @ViewInject(R.id.bind_tel_send_next)
    private TextView mSubmitTv;

    private ButtonThread mThread;
    private SendCodeThread mCodeThread;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_bind_tel);
        initData();
        findViewById();
        initUI();
        setListener();
    }

    @Override
    protected void initData() {

    }

    @Override
    protected void findViewById() {

        ViewUtils.inject(this);

    }

    @Override
    protected void initUI() {

        mBackTv.setText(getResources().getText(R.string.me));
        mRightTv.setVisibility(View.GONE);
        mMiddleTv.setText(getResources().getString(R.string.bind_tel_no));

    }

    @Override
    protected void setListener() {

    }


    protected void startCodeThread(){
        mCodeThread=new SendCodeThread(this,mSendCodeTv);
        mCodeThread.start();
    }

    protected void startThread(){


        mThread=new ButtonThread(mSubmitTv,new Threadable() {
            @Override
            public boolean isSubmit() {
                return isSubmit();
            }
        });

        mThread.start();

    }



    @OnClick(R.id.title_left)
    public void back(View v){
        finish();
    }
    @OnClick(R.id.bind_tel_send_again)
    public void code(View v){
        //发送验证码

        startCodeThread();
    }

    @OnClick(R.id.bind_tel_send_next)
    public void submit(View v){
        String tel=delSpace(mTelEt.getText().toString().toString().trim());
        String code=mCodeEt.getText().toString().toString().trim();
        if(!TextModify.getInstance().isTel(tel)||!TextModify.getInstance().isCode(code)){
//            ToastUtil.customShow(this, getResources().getString(R.string.nickname_not_pass));
            return;
        }


    }

    protected boolean isSubmit(){
        String tel=delSpace(mTelEt.getText().toString().toString().trim());
        String code=mCodeEt.getText().toString().toString().trim();
        return TextModify.getInstance().isTel(tel)&&TextModify.getInstance().isCode(code);
    }

    @Override
    protected void onResume() {
        super.onResume();

        mThread=null;
        startThread();
    }

    @Override
    protected void onPause() {

        super.onPause();
        mThread.stopThread();

    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if(mCodeThread.isAlive()){
            mCodeThread.stopThread();
        }

    }


    public String delSpace(String string){

        if(string.length()!=13){
            return "";
        }


        StringBuffer buffer = new StringBuffer();
        buffer.append(string);
        int index = 0;
        while (index < buffer.length()) {
            if (buffer.charAt(index) == ' ') {
                buffer.deleteCharAt(index);
            } else {

                index++;
            }
        }
        return buffer.toString();

    }



}
