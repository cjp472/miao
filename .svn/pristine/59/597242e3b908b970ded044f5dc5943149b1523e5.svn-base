package com.liuzhuni.lzn.core.siri;

import android.content.Intent;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.os.Bundle;
import android.os.Handler;
import android.text.TextUtils;
import android.view.View;
import android.widget.ImageView;
import android.widget.TextView;

import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.toolbox.ImageLoader;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.lidroid.xutils.ViewUtils;
import com.lidroid.xutils.view.annotation.ViewInject;
import com.lidroid.xutils.view.annotation.event.OnClick;
import com.liuzhuni.lzn.R;
import com.liuzhuni.lzn.base.Base2Activity;
import com.liuzhuni.lzn.config.MessageWhat;
import com.liuzhuni.lzn.config.UrlConfig;
import com.liuzhuni.lzn.core.buylist.BuyActivity;
import com.liuzhuni.lzn.core.goods.GoodsActivity;
import com.liuzhuni.lzn.core.model.BaseListModel;
import com.liuzhuni.lzn.core.select.SelectActivity;
import com.liuzhuni.lzn.core.select.model.SelectGoodsModel;
import com.liuzhuni.lzn.core.siri.adapter.SiriAdapter;
import com.liuzhuni.lzn.core.siri.model.GoodsListModel;
import com.liuzhuni.lzn.core.siri.model.SiriModel;
import com.liuzhuni.lzn.db.DataBaseHelper;
import com.liuzhuni.lzn.db.DatabaseOperate;
import com.liuzhuni.lzn.db.DbModel;
import com.liuzhuni.lzn.example.qr_codescan.MipcaActivityCapture;
import com.liuzhuni.lzn.utils.PreferencesUtils;
import com.liuzhuni.lzn.utils.ToastUtil;
import com.liuzhuni.lzn.volley.GsonBaseRequest;
import com.liuzhuni.lzn.volley.RequestManager;
import com.liuzhuni.lzn.xList.XListView;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

public class TextSiriActivity extends Base2Activity implements XListView.IXListViewListener {

    @ViewInject(R.id.title_left)
    private TextView mBackTv;
    @ViewInject(R.id.title_right_iv)
    private ImageView mRightIv;
    @ViewInject(R.id.title_middle)
    private TextView mMiddleTv;
    @ViewInject(R.id.siri_buy_list)
    private TextView mWantBuyTv;


    @ViewInject(R.id.siri_i_want_buy)
    private TextView mBuyTv;
    @ViewInject(R.id.siri_list)
    private XListView mListView;


    private SQLiteDatabase db;
    private DataBaseHelper helper;

    private SimpleDateFormat mDateFormat = new SimpleDateFormat("HH:mm");
    private String mTime;


    private int mTotal = 1;
    private int mIndex = 0;

    private int back = 0;
    private int forward = 0;
    //    private int mUnRead = 0;

    private List<DbModel> mDbList = null;
    /**
     * 退出线程状态量
     */
    private boolean mIsExit = false;
    private boolean mIsPullDown=false;


    private boolean mIsFirst = true;

    private boolean fromSelect=false;

    private static int position;


    private SiriAdapter mAdapter;
    private ImageLoader mImageLoader;
    private List<SiriModel> mList;
    private List<SiriModel> mCurrentList = new ArrayList<SiriModel>();
    ;
    private Handler mHandler = new Handler() {
        public void handleMessage(android.os.Message msg) {
            switch (msg.what) {
                case MessageWhat.SIRI_DELAY:
                    mAdapter.notifyDataSetChanged();
                    mListView.setSelection(mCurrentList.size() - 1);

                    break;
            }

        }

    };

    private Thread mThread = new Thread(new Runnable() {//不操作mlist则 不会使用线程  添加控制即可
        @Override
        public void run() {


            while (!mIsExit) {

                try {
                    mThread.sleep(DELAY);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                if (position < mList.size() && mList.get(position) != null) {
//                    mCurrentList.add(mList.get(position));
                    addList(mList.get(position));
                    position++;
                    mHandler.sendEmptyMessage(MessageWhat.SIRI_DELAY);
                }
            }
        }
    });
    /**
     * 获取对应ID
     */

    /**
     * 延时time
     */

    public static final int DELAY = 1200;

    public static final int REQUEST_CODE = 1;
    private final static int SCANNIN_GREQUEST_CODE = 2;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_text_siri);
        findViewById();
        initData();
        initUI();
        setListener();
//        listview.setSelection(listview.getAdapter().getCount()-1); 滑动到最后
    }

    @Override
    protected void initData() {
        mImageLoader = RequestManager.getImageLoader();



        Date date = new Date();
        mTime = mDateFormat.format(date);

        helper = new DataBaseHelper(this, "goods_" + PreferencesUtils.getValueFromSPMap(this, PreferencesUtils.Keys.AUTH, "", PreferencesUtils.Keys.USERINFO).hashCode() + ".db");
        db = helper.getWritableDatabase();
        mList = new ArrayList<SiriModel>();

        mAdapter = new SiriAdapter(mCurrentList, mList, this, mImageLoader);//mlist 实际掌控 在adapter中有操作  mCurrentlist用于模拟
        mListView.setCacheColorHint(Color.TRANSPARENT);
        mListView.setDivider(getResources().getDrawable(R.drawable.trans));
        mListView.setDividerHeight(12);
        mListView.setSelector(getResources().getDrawable(R.drawable.trans));
        mListView.setPullLoadEnable(false);
        mListView.setXListViewListener(this);

        mListView.setAdapter(mAdapter);

        mDbList = DatabaseOperate.getDb(db);
        Collections.reverse(mDbList);//反转
        fromDb(mDbList, false, true);

        if(getIntent()!=null){//搜索页面跳转
            if(getIntent().getExtras()!=null){
                fromSelect=true;
                //同选择返回
                BaseListModel<DbModel> goodsModel=(BaseListModel<DbModel>) getIntent().getExtras().getSerializable("list");
                Collections.reverse(goodsModel.getData());
                fromDbDelay(goodsModel.getData(),true,false);
                for (DbModel dbModel : goodsModel.getData()) {
                    DatabaseOperate.insert(db, dbModel);
                }

            }
        }

        if(!fromSelect){//刷新
            if(back>=0){
                pullHistoryData(back, "back");
            }else{
                ToastUtil.show(TextSiriActivity.this, getResources().getText(R.string.no_more_error));
            }
        }
        mThread.start();


    }

    @Override
    protected void findViewById() {

        ViewUtils.inject(this);

    }

    @Override
    protected void initUI() {
        mMiddleTv.setText(getResources().getText(R.string.secreter));
        mRightIv.setImageDrawable(getResources().getDrawable(R.drawable.ic_saoyisao));
    }

    @Override
    protected void setListener() {

    }

    protected synchronized void addList(SiriModel model) {

        mCurrentList.add(model);


    }

    protected synchronized void addList(List<SiriModel> model) {

        mCurrentList.addAll(0, model);


    }

    protected synchronized void clear() {

        mCurrentList.clear();


    }


    protected synchronized void pullHistoryData(final int id, final String way) {
        executeRequest(new GsonBaseRequest<BaseListModel<DbModel>>(Request.Method.GET, UrlConfig.GET_DIALOG + id + "&way=" + way, new TypeToken<BaseListModel<DbModel>>() {
        }.getType(), responseHisListener(), errorListener()) {
        });
    }

    private Response.Listener<BaseListModel<DbModel>> responseHisListener() {
        return new Response.Listener<BaseListModel<DbModel>>() {
            @Override
            public void onResponse(BaseListModel<DbModel> historyModel) {

                back = historyModel.getBack();
                forward = historyModel.getForward();
                if (historyModel.getRet() == 0) {

                    if (historyModel.getData() != null) {
                        Collections.reverse(historyModel.getData());
                        fromDb(historyModel.getData(), true, false);

                        //update database
                        for (DbModel dbModel : historyModel.getData()) {
                            DatabaseOperate.insert(db, dbModel);

                        }

                    }

                } else {
                    if(mCurrentList.size()>10){
                        ToastUtil.show(TextSiriActivity.this, getResources().getText(R.string.no_more_error));
                    }

                }
            }
        };

    }

    protected void fromDb(List<DbModel> dbList, boolean isDialog, boolean isHistory) {

        List<SiriModel> tempList = new ArrayList<SiriModel>();
        if(!PreferencesUtils.getBooleanFromSPMap(this, PreferencesUtils.Keys.IS_DIALOG)) {
            mList.add(new SiriModel<String>(SiriAdapter.LEFT_TEXT, getResources().getString(R.string.dialog_first)));
            mList.add(new SiriModel<String>(SiriAdapter.RIGHT_TEXT_CLICK, getResources().getString(R.string.dialog_second)));
            PreferencesUtils.putBooleanToSPMap(this, PreferencesUtils.Keys.IS_DIALOG, true);
        }
        if (dbList != null) {
            for (DbModel dbModel : dbList) {
                tempList.add(new SiriModel<String>(SiriAdapter.TIME, dbModel.getDate()));
                if(!TextUtils.isEmpty(dbModel.getText())){
                    tempList.add(new SiriModel<String>(SiriAdapter.RIGHT_TEXT, dbModel.getText()));
                }
                ArrayList<SelectGoodsModel> goodsList = new Gson().fromJson(dbModel.getBody(), new TypeToken<ArrayList<SelectGoodsModel>>() {
                }.getType());
                tempList.add(new SiriModel<GoodsListModel>(SiriAdapter.RIGHT_GOODS, new GoodsListModel(goodsList)));
                if (isDialog) {
                    tempList.add(new SiriModel<Boolean>(SiriAdapter.RIGHT_DIALOG, dbModel.getBody_id(), true));
                }
            }

        }
//            mCurrentList.addAll(0, tempList);
        if (isHistory) {
            addList(tempList);
            mAdapter.notifyDataSetChanged();
            if(mIsFirst){
                mListView.setSelection(mCurrentList.size() - 1);
            }else{
                mListView.setSelection(0);
            }
        } else {
            if (mIsFirst) {
                clear();
                mIsFirst = false;
            }
            addList(tempList);
            mAdapter.notifyDataSetChanged();
            if(mIsPullDown){
                mListView.setSelection(0);
            }else{
                mListView.setSelection(mCurrentList.size() - 1);
            }
        }

    }

    protected void fromDbDelay(List<DbModel> dbList, boolean isDialog, boolean isHistory) {

        List<SiriModel> tempList = new ArrayList<SiriModel>();
        if(!PreferencesUtils.getBooleanFromSPMap(this, PreferencesUtils.Keys.IS_DIALOG)) {
            mList.add(new SiriModel<String>(SiriAdapter.LEFT_TEXT, getResources().getString(R.string.dialog_first)));
            mList.add(new SiriModel<String>(SiriAdapter.RIGHT_TEXT_CLICK, getResources().getString(R.string.dialog_second)));
            PreferencesUtils.putBooleanToSPMap(this, PreferencesUtils.Keys.IS_DIALOG, true);
        }
        if (dbList != null) {
            for (DbModel dbModel : dbList) {
                tempList.add(new SiriModel<String>(SiriAdapter.TIME, dbModel.getDate()));
                if(!TextUtils.isEmpty(dbModel.getText())){
                    tempList.add(new SiriModel<String>(SiriAdapter.RIGHT_TEXT, dbModel.getText()));
                }
                ArrayList<SelectGoodsModel> goodsList = new Gson().fromJson(dbModel.getBody(), new TypeToken<ArrayList<SelectGoodsModel>>() {
                }.getType());
                tempList.add(new SiriModel<GoodsListModel>(SiriAdapter.RIGHT_GOODS, new GoodsListModel(goodsList)));
                if (isDialog) {
                    tempList.add(new SiriModel<Boolean>(SiriAdapter.RIGHT_DIALOG, dbModel.getBody_id(), true));
                }
            }

        }
//            mCurrentList.addAll(0, tempList);
      mList.addAll(tempList);

    }


    @Override
    protected void onDestroy() {
        super.onDestroy();
        mIsExit = true;
        db.close();
    }

    @OnClick(R.id.title_left)
    public void back(View v) {

        finish();
    }

    @OnClick(R.id.title_right_iv)
    public void qrCode(View v) {
        //扫描条码

        Intent intent = new Intent();
        intent.setClass(TextSiriActivity.this, MipcaActivityCapture.class);
        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
//        startActivityForResult(intent, SCANNIN_GREQUEST_CODE);
        startActivity(intent);


    }

    @OnClick(R.id.siri_buy_list)
    public void wantBuyList(View v) {
        //悦购清单
        Intent intent = new Intent(TextSiriActivity.this, BuyActivity.class);
        startActivity(intent);


    }

    @OnClick(R.id.siri_i_want_buy)
    public void wantBuy(View v) {
        //我想买
        Intent intent = new Intent(TextSiriActivity.this, SelectActivity.class);
        startActivityForResult(intent, REQUEST_CODE);

    }


    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        //此处操作

        switch (requestCode) {

            case REQUEST_CODE:

                if (resultCode == RESULT_OK) {
                    BaseListModel<DbModel> goodsModel=(BaseListModel<DbModel>) data.getExtras().getSerializable("list");
                    Collections.reverse(goodsModel.getData());
                    fromDbDelay(goodsModel.getData(),true,false);
                    for (DbModel dbModel : goodsModel.getData()) {
                        DatabaseOperate.insert(db, dbModel);

                    }
                } else if (resultCode == 1024) {
                    mList.add(new SiriModel<String>(SiriAdapter.LEFT_TEXT, TextSiriActivity.this.getResources().getString(R.string.no_dialog_six)));
                    mList.add(new SiriModel<String>(SiriAdapter.LEFT_TEXT, TextSiriActivity.this.getResources().getString(R.string.no_help_dialog_six)));
                }


                break;


            case SCANNIN_GREQUEST_CODE:
                if (resultCode == RESULT_OK) {
                    Bundle bundle = data.getExtras();
//                    ToastUtil.customShow(this, bundle.getString("result"));
                    Intent intent = new Intent(this, GoodsActivity.class);
                    Bundle goodsBundle = new Bundle();
                    goodsBundle.putString("code", bundle.getString("result"));
                    goodsBundle.putString("mall", "");
                    goodsBundle.putBoolean("isCode", true);
                    intent.putExtras(goodsBundle);
                    startActivity(intent);
                }


                break;
        }


    }

    @Override
    public void onRefresh() {

        mHandler.postDelayed(new Runnable() {
            @Override
            public void run() {
                mIsPullDown=true;
                if(back>=0){
                    pullHistoryData(back, "back");
                }else{
                    ToastUtil.show(TextSiriActivity.this, getResources().getText(R.string.no_more_error));
                }
                mListView.stopRefresh();
            }
        },200);


    }

    @Override
    public void onLoadMore() {

    }
}
