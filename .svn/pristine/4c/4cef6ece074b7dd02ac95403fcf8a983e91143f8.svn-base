package com.liuzhuni.lzn.core.login;

import android.content.Intent;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import android.view.View;
import android.widget.ImageView;
import android.widget.TextView;

import com.android.volley.Request;
import com.android.volley.Response;
import com.google.gson.reflect.TypeToken;
import com.lidroid.xutils.ViewUtils;
import com.lidroid.xutils.view.annotation.ViewInject;
import com.lidroid.xutils.view.annotation.event.OnClick;
import com.liuzhuni.lzn.R;
import com.liuzhuni.lzn.base.Base2Activity;
import com.liuzhuni.lzn.config.UrlConfig;
import com.liuzhuni.lzn.core.login.model.LoginModel;
import com.liuzhuni.lzn.core.login.ui.DoubleRightView;
import com.liuzhuni.lzn.core.model.BaseModel;
import com.liuzhuni.lzn.core.regist.RegistActivity;
import com.liuzhuni.lzn.core.select.ui.CleanableEditText;
import com.liuzhuni.lzn.utils.DensityUtil;
import com.liuzhuni.lzn.utils.PreferencesUtils;
import com.liuzhuni.lzn.utils.TextModify;
import com.liuzhuni.lzn.utils.ToastUtil;
import com.liuzhuni.lzn.utils.log.CommonLog;
import com.liuzhuni.lzn.utils.log.LogFactory;
import com.liuzhuni.lzn.volley.ApiParams;
import com.liuzhuni.lzn.volley.GsonBaseRequest;
import com.liuzhuni.lzn.volley.GsonRequest;

import java.util.HashMap;
import java.util.Map;

import cn.sharesdk.framework.Platform;
import cn.sharesdk.framework.PlatformActionListener;
import cn.sharesdk.framework.PlatformDb;
import cn.sharesdk.framework.ShareSDK;
import cn.sharesdk.sina.weibo.SinaWeibo;
import cn.sharesdk.tencent.qq.QQ;
import cn.sharesdk.wechat.friends.Wechat;

//Ctrl+Alt+T 代码块包裹
public class LoginActivity extends Base2Activity {

    private CommonLog log = LogFactory.createLog("login");

    private ButtonThread mThread;
//    private boolean mIsSend;//检测信号


//    private volatile boolean mQuit=false;//线程结束信号量


    @ViewInject(R.id.title_left)
    private TextView mBackTv;
    @ViewInject(R.id.title_right)
    private TextView mRegistTv;

    @ViewInject(R.id.submit_login)
    private TextView mSubmitTv;

    @ViewInject(R.id.forgot_login)
    private TextView mForgotTv;

    @ViewInject(R.id.tel_login)
    private CleanableEditText mTelEt;

    @ViewInject(R.id.passwd_login)
    private DoubleRightView mPasswdPv;

    @ViewInject(R.id.qq_login)
    private ImageView mQQIv;

    @ViewInject(R.id.weixin_login)
    private ImageView mWeixinIv;

    @ViewInject(R.id.sina_login)
    private ImageView mSinaIv;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_login);
//        initData();
        findViewById();
//        initUI();
        setListener();
    }

    @Override
    protected void initData() {


        mThread = new ButtonThread(mSubmitTv, new Threadable() {
            @Override
            public boolean isSubmit() {
                return LoginActivity.this.isSubmit();
            }
        });


        DisplayMetrics dm = new DisplayMetrics();
        getWindowManager().getDefaultDisplay().getMetrics(dm);
        int screenHeight, screenWidth;
        screenHeight = dm.heightPixels;
        screenWidth = dm.widthPixels;

//        ToastUtil.showLong(this,
//                dm.toString() + "\n屏幕宽度像素:" + screenWidth + "px,换算dp：" + DensityUtil.px2dip(this,
//                        screenWidth));

        log.i(dm.toString() + "++++++" + dm.densityDpi + "\n屏幕宽度像素:" + screenWidth + "px,换算dp：" + DensityUtil.px2dip(this,
                screenWidth));


    }

    @Override
    protected void findViewById() {
        ViewUtils.inject(this);
    }

    @Override
    protected void initUI() {
        mThread.start();

    }

    @Override
    protected void setListener() {

    }


    protected boolean isSubmit() {
        String tel = mTelEt.getText().toString().trim();
        String passwd = mPasswdPv.getText().toString();

        return passwd.length() > 1 && (TextModify.getInstance().isEmail(tel) || TextModify.getInstance().isTel(tel));
    }


    protected void submit() {

        String tel = mTelEt.getText().toString().trim();
        String passwd = mPasswdPv.getText().toString();

        if (!TextModify.getInstance().isEmail(tel) && !TextModify.getInstance().isTel(tel)) {
            //邮箱手机校验

            return;

        }

        if (TextUtils.isEmpty(passwd)) {
            //密码校验

            return;

        }

        pullLoginData(tel + "|" + passwd);

    }


    @Override
    protected void onResume() {
        super.onResume();

        mThread = null;
        initData();
        initUI();
        log.i("onResume" + mThread.hashCode() + "====" + mThread.getId() + "---------" + mThread.getName() + "-----" + mThread.isAlive() + "-----" + mThread.isInterrupted());
    }

    @Override
    protected void onPause() {

        super.onPause();
        mThread.stopThread();
        log.i("" + mThread.getId() + "---------" + mThread.getName() + "-----" + mThread.isAlive());
        mThread.interrupt();
        log.i("onpause" + mThread.hashCode() + "====" + mThread.getId() + "---------" + mThread.getName() + "-----" + mThread.isAlive() + "-----" + mThread.isInterrupted());

    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        log.i("ondestroy-----" + mThread.hashCode() + "====" + mThread.getId() + "---------" + mThread.getName() + "-----" + mThread.isAlive() + "-----" + mThread.isInterrupted());
    }

    protected synchronized void pullLoginData(final String code){
        executeRequest(new GsonBaseRequest<BaseModel<LoginModel>>(Request.Method.POST, UrlConfig.LOGIN,new TypeToken<BaseModel<LoginModel>>(){}.getType(),responseLoginListener(),errorListener()){

            protected Map<String, String> getParams() {
                return new ApiParams().with("code", code);
            }

        });
    }

    private Response.Listener<BaseModel<LoginModel>> responseLoginListener() {
        return new Response.Listener<BaseModel<LoginModel>>(){
            @Override
            public void onResponse(BaseModel<LoginModel> loginModel) {
                if(loginModel.getRet()==0){
                    ToastUtil.customShow(LoginActivity.this, getResources().getText(R.string.toast_login));
                    PreferencesUtils.putBooleanToSPMap(LoginActivity.this, PreferencesUtils.Keys.IS_LOGIN, true);
                    PreferencesUtils.putValueToSPMap(LoginActivity.this, PreferencesUtils.Keys.AUTH, loginModel.getData().getAuthName(), PreferencesUtils.Keys.USERINFO);
                    PreferencesUtils.putValueToSPMap(LoginActivity.this, PreferencesUtils.Keys.TOKEN, loginModel.getData().getToken(), PreferencesUtils.Keys.USERINFO);
                    PreferencesUtils.putValueToSPMap(LoginActivity.this, PreferencesUtils.Keys.HEAD_URL, loginModel.getData().getPic(), PreferencesUtils.Keys.USERINFO);
                    PreferencesUtils.putValueToSPMap(LoginActivity.this,PreferencesUtils.Keys.NICKNAME,loginModel.getData().getName(),PreferencesUtils.Keys.USERINFO);
                    PreferencesUtils.putValueToSPMap(LoginActivity.this,PreferencesUtils.Keys.TEL,loginModel.getData().getPhone(),PreferencesUtils.Keys.USERINFO);
                    PreferencesUtils.putValueToSPMap(LoginActivity.this,PreferencesUtils.Keys.LEVEL,"Lv."+loginModel.getData().getGrade(),PreferencesUtils.Keys.USERINFO);
                    PreferencesUtils.putIntToSPMap(LoginActivity.this,PreferencesUtils.Keys.UN_READ,loginModel.getData().getUnreadNum(),PreferencesUtils.Keys.USERINFO);
                    if(!PreferencesUtils.getBooleanFromSPMap(LoginActivity.this,PreferencesUtils.Keys.IS_SEND_SEX,PreferencesUtils.Keys.USERINFO)){
                        pullSexData();
                    }
                    finish();
                }

            }
        };

    }
    protected synchronized void pullSexData(){
        executeRequest(new GsonRequest<BaseModel>(Request.Method.POST, UrlConfig.SEX_SET,BaseModel.class,responseSexListener(),errorListener()){

            protected Map<String, String> getParams() {
                return new ApiParams().with("v", PreferencesUtils.getValueFromSPMap(LoginActivity.this,PreferencesUtils.Keys.SEX,"1",PreferencesUtils.Keys.USERINFO));
            }

        });
    }

    private Response.Listener<BaseModel> responseSexListener() {
        return new Response.Listener<BaseModel>(){
            @Override
            public void onResponse(BaseModel sign) {
                if(sign.getRet()==0){
                    PreferencesUtils.putBooleanToSPMap(LoginActivity.this,PreferencesUtils.Keys.IS_SEND_SEX,true,PreferencesUtils.Keys.USERINFO);
                }

            }
        };

    }



    @OnClick({R.id.title_left, R.id.title_right, R.id.submit_login, R.id.forgot_login, R.id.qq_login, R.id.weixin_login, R.id.sina_login})
    public void onClick(View v) {

        switch (v.getId()) {

            case R.id.title_left:
                finish();
                break;

            case R.id.title_right:
//注册
                Intent registIntent = new Intent(this, RegistActivity.class);
                Bundle bundle = new Bundle();
                bundle.putBoolean("isRegister", true);
                registIntent.putExtras(bundle);
                startActivity(registIntent);
                break;

            case R.id.submit_login:
                submit();

                break;

            case R.id.forgot_login:
//忘记密码

                Intent forgotIntent = new Intent(this, RegistActivity.class);
                Bundle forgotBundle = new Bundle();
                forgotBundle.putBoolean("isRegister", false);
                forgotIntent.putExtras(forgotBundle);
                startActivity(forgotIntent);

                break;


            case R.id.qq_login:
                ShareSDK.initSDK(this);

                Platform qq = ShareSDK.getPlatform(this, QQ.NAME);
                if (qq.isValid()) {
                    qq.removeAccount();//先清除在登录
                }
                qq.setPlatformActionListener(new PlatformActionListener() {
                    @Override
                    public void onComplete(Platform platform, int action, HashMap<String, Object> res) {

                        if (action == Platform.ACTION_USER_INFOR) {

                            PlatformDb platDB = platform.getDb();//获取数平台数据DB
                            //通过DB获取各种数据
                            log.i(platDB.getToken()+"======="+platDB.getUserGender()+"======="+platDB.getUserIcon()+"======="+platDB.getUserId()+"======="+platDB.getUserName());


                        }

                    }

                    @Override
                    public void onError(Platform platform, int i, Throwable throwable) {

                    }

                    @Override
                    public void onCancel(Platform platform, int i) {

                    }
                });


                //关闭SSO授权
                qq.SSOSetting(false);

//                qq.authorize();
                qq.showUser(null);//执行登录，登录后在回调里面获取用户资料
                //weibo.showUser(“3189087725”);//获取账号为“3189087725”的资料 null


                break;


            case R.id.weixin_login:
                ShareSDK.initSDK(this);

                Platform weixin = ShareSDK.getPlatform(this, Wechat.NAME);

                if (weixin.isValid()) {
                    weixin.removeAccount();
                }
                weixin.setPlatformActionListener(new PlatformActionListener() {
                    @Override
                    public void onComplete(Platform platform, int action, HashMap<String, Object> res) {

//                        if (action == Platform.ACTION_USER_INFOR) {

                            PlatformDb platDB = platform.getDb();//获取数平台数据DB
                            //通过DB获取各种数据
                            log.i(platDB.getToken()+"======="+platDB.getUserGender()+"======="+platDB.getUserIcon()+"======="+platDB.getUserId()+"======="+platDB.getUserName());

//                        }

                    }

                    @Override
                    public void onError(Platform platform, int i, Throwable throwable) {
                        log.i("error");
                    }

                    @Override
                    public void onCancel(Platform platform, int i) {
                        log.i("cancel");
                    }
                });
//                weixin.authorize();
                //关闭SSO授权
                weixin.SSOSetting(false);
//                weixin.authorize();
                weixin.showUser(null);


                break;


            case R.id.sina_login:

                ShareSDK.initSDK(this);

                Platform sina = ShareSDK.getPlatform(this, SinaWeibo.NAME);
                if (sina.isValid()) {
                    sina.removeAccount();
                }
                sina.setPlatformActionListener(new PlatformActionListener() {
                    @Override
                    public void onComplete(Platform platform, int action, HashMap<String, Object> res) {

                        if (action == Platform.ACTION_USER_INFOR) {

                            PlatformDb platDB = platform.getDb();//获取数平台数据DB
                            //通过DB获取各种数据
                            log.i(platDB.getToken()+"======="+platDB.getUserGender()+"======="+platDB.getUserIcon()+"======="+platDB.getUserId()+"======="+platDB.getUserName());


                        }

                    }

                    @Override
                    public void onError(Platform platform, int i, Throwable throwable) {

                        log.i("error");

                    }

                    @Override
                    public void onCancel(Platform platform, int i) {

                        log.i("cancel");

                    }
                });

                //true关闭SSO授权
                sina.SSOSetting(false);
                sina.showUser(null);


                break;

            default:
                break;

        }

    }


}
